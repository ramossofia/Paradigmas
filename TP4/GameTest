// src/GameTests.java
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

public class GameTests {

    @Test
    public void testPlayerCannotPlayTwiceInARow() {
        Player player1 = new Player("Alice", 3);
        Player player2 = new Player("Bob", 0);
        List<Player> players = Arrays.asList(player1, player2);
        List<Integer> cards = Arrays.asList(10);

        Game game = new Game();
        game.startGame(players, 2, cards);  // Each player gets 2 tokens

        // Alice places a token
        game.executeAction(new PlaceToken(player1));

        // Alice tries to play again, should throw an exception
        try {
            game.executeAction(new PlaceToken(player1));
            fail("Expected IllegalStateException");
        } catch (IllegalStateException e) {
            assertEquals("It's not Alice's turn.", e.getMessage());
        }
    }
    @Test
    public void testCalculatePointsWithSeries() {
        Player player = new Player("TestPlayer", 5);
        player.addCard(new Card(5, 0));
        player.addCard(new Card(6, 0));
        player.addCard(new Card(7, 0));
        int points = player.calculatePoints();
        assertEquals(0, points); // 5 tokens - 5 points (smallest card in series)
    }

    @Test
    public void testCalculatePointsWithoutSeries() {
        Player player = new Player("TestPlayer", 5);
        player.addCard(new Card(3, 0));
        player.addCard(new Card(8, 0));
        player.addCard(new Card(10, 0));
        int points = player.calculatePoints();
        assertEquals(-16, points); // 5 tokens - 3 - 8 - 10 points
    }


}
